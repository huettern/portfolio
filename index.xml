<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Noah Hütter Portfolio</title>
    <link>https://xn--htter-kva.ch/</link>
    <description>Recent content on Noah Hütter Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xn--htter-kva.ch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BA Thesis | diip</title>
      <link>https://xn--htter-kva.ch/projects/ba-thesis-diip/</link>
      <pubDate>Mon, 11 Mar 2019 03:29:08 -0700</pubDate>
      
      <guid>https://xn--htter-kva.ch/projects/ba-thesis-diip/</guid>
      <description>Abstract In the world of self-driving cars and virtual reality games it is becoming increasingly important to represent digitally what we see. Therefore, using high resolution cameras, images of the environment have been recorded. These large images are processed to be presented three dimensionally. This image processing task needs to be accelerated to get a fast work flow. A dedicated hardware approach using Field Programmable Gate Arrays (FPGA) was implemented that is scalable onto multiple FPGAs.</description>
    </item>
    
    <item>
      <title>FPGA for Power Electronics Control</title>
      <link>https://xn--htter-kva.ch/projects/eth-pes-chb/</link>
      <pubDate>Wed, 28 Aug 2019 03:29:08 -0700</pubDate>
      
      <guid>https://xn--htter-kva.ch/projects/eth-pes-chb/</guid>
      <description>Abstract Based on a simulation and multiple research papers I implemented a PI control algorithm and a complex PWM modulator in FPGA fabric and CPU to control a high power converter. The result are two IP cores that are controlled over an AXI4Lite interface by the CPU, both with PWM modulators, one having a PI controller built in and the other multi channel ADC support. A low level C driver can be used to communicate with the cores from the ARM CPU on the Zynq SoC.</description>
    </item>
    
    <item>
      <title>Edison - Keyword Spotting on Microcontroller</title>
      <link>https://xn--htter-kva.ch/posts/edison-kws-on-mcu/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xn--htter-kva.ch/posts/edison-kws-on-mcu/</guid>
      <description>1. TLDR Download pre-processed audio data, train the model, implement it and compile the MCU code.
# clone and setup git clone https://github.com/noah95/edison cd edison source bootstrap.sh # fetch training data and pre-trained model curl -L https://github.com/noah95/edison/releases/download/v2.0.0-RC1/keywords-8-noah.tar.gz | tar xvz curl -L https://github.com/noah95/edison/releases/download/v2.0.0-RC1/kws_model.h5 -o cache/kws_keras/kws_model.h5 # train model ./main.py train keras train cp cache/kws_keras/kws_model.h5 ../firmware/src/ai/cube/kws/kws_model.h5  open cube project firmware/CubeMX/edison.ioc Additional Software -&amp;gt; STMicro&amp;hellip; -&amp;gt; kws Browse: select firmware/src/ai/cube/kws/kws_model.h5 Analyse click GENERATE CODE  # import net to firmware folder cd .</description>
    </item>
    
    <item>
      <title>Encrypted Remote Backup using duplicity</title>
      <link>https://xn--htter-kva.ch/posts/encrypted-remote-backup-using-duplicity/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xn--htter-kva.ch/posts/encrypted-remote-backup-using-duplicity/</guid>
      <description>Introduction My Data is currently stored on a 5 bay Synology NAS running a SHR RAID. All data is periodically backed up to a external hard drive using HyperBackup. This way my data is safe from a RAID failure. BUT what if the data gets mechanically destroyed or a virus encrypts all data on the NAS? An off-site backup solution must be found.
Requirements  Off-site backup at low to no cost therefore cloud services are expelled Data transfer over SSH because security Data encryption!</description>
    </item>
    
    <item>
      <title>Alpine Linux on Zynq</title>
      <link>https://xn--htter-kva.ch/posts/pitaya-alpine/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xn--htter-kva.ch/posts/pitaya-alpine/</guid>
      <description>Disclaimer: This code is largely copied from https://github.com/pavel-demin/red-pitaya-notes, licensed under MIT license.
Prerequisites This tutorial is built on top of the Linux on Zynq tutorial. It requires the Kernel built in the previous post. So if you want to get it working, start over at Linux on Zynq and come back here after you are done.
Clone my zynq-sandbox repository from github if you have not done so already.
git clone https://github.</description>
    </item>
    
    <item>
      <title>Linux on Zynq</title>
      <link>https://xn--htter-kva.ch/posts/pitaya-linux/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xn--htter-kva.ch/posts/pitaya-linux/</guid>
      <description>Disclaimer: This code is largely copied from https://github.com/pavel-demin/red-pitaya-notes, licensed under MIT license.
Prerequirements DO NOT WORK ON A SHARED FOLDER INSIDE VIRTUALBOX It will get messy, because the Linux kernel build uses a case sensitive file system, which Mac does not provide.
Clone my zynq-sandbox repository from github if you have not done so already.
git clone https://github.com/noah95/zynq-sandbox Fix gmake:
sudo ln -s /usr/bin/make /usr/bin/gmake Install some tools:
sudo apt install curl u-boot-tools libncurses-dev Change to the Linux directory.</description>
    </item>
    
    <item>
      <title>Zynq with RedPitaya from scratch: Hello PS World</title>
      <link>https://xn--htter-kva.ch/posts/pitaya-fs-hello-ps/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xn--htter-kva.ch/posts/pitaya-fs-hello-ps/</guid>
      <description>In this post we are going to say Hello from the processing system (PS) in the Zynq SoC. As a platform I am using the RedPitaya board. With only 199$ it is the cheapest Xilinx Zynq board on the market. Unfortunately the hardware is not open source, but with the open source software, I could figure out the necessary settings to get this board running.
Run Vivado sourcevivado vivado &amp;amp; Create a new Project Create a new project from File -&amp;gt; New Project, Next.</description>
    </item>
    
  </channel>
</rss>